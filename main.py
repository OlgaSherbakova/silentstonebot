import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import os

TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = "@mysilentchannel"  # –ò–º—è —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞ (–ø—É–±–ª–∏—á–Ω–æ–≥–æ)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
def load_tasks():
    with open("tasks.txt", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

TASKS = load_tasks()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
reply_kb = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb.add(
    KeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥"),
    KeyboardButton("üîÅ –î–∞–π –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
)

# /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    greeting = (
        "–ü—Ä–∏–≤–µ—Ç. –Ø —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å.\n\n"
        "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –∫–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ ‚Äî —ç—Ç–æ —É–∂–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ.\n\n"
        "–ù–µ –∑–Ω–∞—é, —Å—á–∏—Ç–∞–µ—à—å –ª–∏ —Ç—ã —Å–µ–±—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º, \n"
        "–Ω–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –Ω–∏–∂–µ –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–∞–ª–æ —Å–ª—É—á–∞–π–Ω–æ.\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –≤—ã–ø–æ–ª–Ω–∏.\n"
        "–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å ‚Äî –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π —Å–ª–µ–¥: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –∑–≤—É–∫, –Ω–∏—á–µ–≥–æ.\n\n"
        "–í—Å—ë –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º."
    )
    await message.answer(greeting, reply_markup=reply_kb)
    await send_task(message)

# üîÅ –î–∞–π –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ ‚Äî –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@dp.message_handler(lambda m: m.text == "üîÅ –î–∞–π –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
async def another_task(message: types.Message):
    await send_task(message)

# üì§ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
async def send_task(message):
    task = random.choice(TASKS)
    await message.answer(f"üé≤ *–ó–∞–¥–∞–Ω–∏–µ:* {task}", parse_mode="Markdown")

# üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥
@dp.message_handler(lambda m: m.text == "üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥")
async def wait_for_response(message: types.Message):
    await message.answer("–ñ–¥—É —Ç–≤–æ–π —Å–ª–µ–¥. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–≤—É–∫.")

# üì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
@dp.message_handler(content_types=types.ContentType.ANY)
async def receive_trace(message: types.Message):
    await message.answer("–°–ø–∞—Å–∏–±–æ. –°–ª–µ–¥ –ø–æ–ª—É—á–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ üåø")

    try:
        if message.text:
            await bot.send_message(CHANNEL_ID, f"üìù –°–ª–µ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n{message.text}")
        elif message.photo:
            await bot.send_photo(CHANNEL_ID, message.photo[-1].file_id, caption="üì∏ –°–ª–µ–¥ (—Ñ–æ—Ç–æ)")
        elif message.voice:
            await bot.send_voice(CHANNEL_ID, message.voice.file_id, caption="üé§ –°–ª–µ–¥ (–≥–æ–ª–æ—Å)")
        elif message.audio:
            await bot.send_audio(CHANNEL_ID, message.audio.file_id, caption="üéµ –°–ª–µ–¥ (–∞—É–¥–∏–æ)")
        elif message.document:
            await bot.send_document(CHANNEL_ID, message.document.file_id, caption="üìé –°–ª–µ–¥ (—Ñ–∞–π–ª)")
        else:
            await bot.send_message(CHANNEL_ID, "üì¶ –°–ª–µ–¥ –ø–æ–ª—É—á–µ–Ω (–Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–∏–ø)")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª:", e)

# üîÅ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
