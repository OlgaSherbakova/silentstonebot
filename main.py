
import random
import asyncio
import datetime
import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = "8142905270:AAEK9RGFV1DZkrw7j-i3qFnimSKaw5XBIMc"
CHANNEL_ID = "@mysilentchannel"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
def load_tasks():
    with open("tasks.json", encoding="utf-8") as f:
        return json.load(f)

# –ü–∞–º—è—Ç—å: –∫—Ç–æ –ø–æ–ª—É—á–∞–ª –∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
user_last_task_date = {}

# –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
user_task_history = {}  # user_id: set of task indexes

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
reply_kb = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb.add(
    KeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥"),
    KeyboardButton("üîÅ –î–∞–π –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
)

# –§–∏–ª—å—Ç—Ä—ã
BAD_WORDS = [
    "—Ö—É–π", "—á–ª–µ–Ω", "–ø–µ–Ω–∏—Å", "–µ–±", "–ø–∏–∑–¥", "fuck", "shit",
    "dick", "–ø–æ—Ä–Ω–æ", "—Ç—Ä–∞—Ö", "–¥—Ä–æ—á", "anal", "cum", "–ø–µ–¥–æ—Ñ–∏–ª"
]
LITE_SWEAR = ["–±–ª—è", "—Å—É–∫–∞", "–Ω–∞—Ö—É–π", "–µ–±–∞—Ç—å", "–ø–∏–∑–¥–µ—Ü"]
JUNK_WORDS = [
    "—Å—Ç–∞—Ä—Ç", "start", "–∞–≥–∞", "–Ω—É", "–¥–∞", "–Ω–µ—Ç", "–æ–∫", "okay", "hello", "–ø—Ä–∏–≤–µ—Ç",
    "–µ—â—ë", "–µ—â–µ", "—Å–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ", "–¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ", "–¥–∞–π –¥—Ä—É–≥–æ–µ", "–ø–æ–≤—Ç–æ—Ä–∏",
    "–µ—â—ë —Ä–∞–∑", "next", "again", "–∑–∞–¥–∞–Ω–∏–µ", "–µ—â—ë!", "–µ—â—ë.", "–µ—â—ë?", "–µ—â—ë)"
]

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    today = datetime.date.today()
    last_date = user_last_task_date.get(user_id)

    greeting = """–ü—Ä–∏–≤–µ—Ç. –Ø —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å.

–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –ø—Ä–æ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ–µ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ. –û–Ω –¥–∞—ë—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è: –∏–Ω–æ–≥–¥–∞ –ø—Ä–æ—Å—Ç—ã–µ, –∏–Ω–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–Ω—ã–µ, –∏–Ω–æ–≥–¥–∞ –ø–æ—á—Ç–∏ –Ω–∏—á–µ–≥–æ.

–í—Å—ë –æ—Å—Ç–∞—ë—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º. –ó–¥–µ—Å—å –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç, –Ω–µ –∂–¥—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.

–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –∫–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ ‚Äî —ç—Ç–æ —É–∂–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ.

–ù–µ –∑–Ω–∞—é, —Å—á–∏—Ç–∞–µ—à—å –ª–∏ —Ç—ã —Å–µ–±—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º, 
–Ω–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –Ω–∏–∂–µ –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–∞–ª–æ —Å–ª—É—á–∞–π–Ω–æ.

–ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å. –ú–æ–∂–Ω–æ –Ω–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å. –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –∑–≤—É–∫.

–≠—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ ‚Äî –æ—Ç–∫—Ä—ã—Ç–æ–µ. 
–ú–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –∫–∞–∫ —Ö–æ—á–µ—à—å. –†–∞–¥–∏ –¥–µ–π—Å—Ç–≤–∏—è. –†–∞–¥–∏ –∏–≥—Ä—ã. –†–∞–¥–∏ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å."""
    await message.answer(greeting, reply_markup=reply_kb)

    if last_date == today:
        await message.answer("üïí –°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –∑–∞–¥–∞–Ω–∏–µ. –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞.", reply_markup=reply_kb)
    else:
        await send_task(message)
        user_last_task_date[user_id] = today
        await message.answer("üì° –°–ª–µ–¥—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ:\nhttps://t.me/mysilentchannel", reply_markup=reply_kb)

@dp.message_handler(lambda m: m.text == "üîÅ –î–∞–π –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
async def another_task(message: types.Message):
    user_id = message.from_user.id
    today = datetime.date.today()
    if user_last_task_date.get(user_id) == today:
        await message.answer("üïí –°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –∑–∞–¥–∞–Ω–∏–µ. –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞.", reply_markup=reply_kb)
    else:
        await send_task(message)
        user_last_task_date[user_id] = today

async def send_task(message):
    user_id = message.from_user.id
    tasks = load_tasks()
    total = len(tasks)

    history = user_task_history.get(user_id, set())
    available = [i for i in range(total) if i not in history]

    if not available:
        await message.answer("üéâ –¢—ã –ø—Ä–æ—à—ë–ª –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è! –ó–∞–≤—Ç—Ä–∞ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=reply_kb)
        user_task_history[user_id] = set()
        return

    task_index = random.choice(available)
    task = tasks[task_index]

    history.add(task_index)
    user_task_history[user_id] = history

    await message.answer(f"*{task['title']}*\n\n{task['description']}", parse_mode="Markdown", reply_markup=reply_kb)

@dp.message_handler(lambda m: m.text == "üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥")
async def wait_for_response(message: types.Message):
    await message.answer("–ñ–¥—É —Ç–≤–æ–π —Å–ª–µ–¥. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–≤—É–∫.", reply_markup=reply_kb)

@dp.message_handler(content_types=types.ContentType.ANY)
async def receive_trace(message: types.Message):
    await message.answer("–°–ø–∞—Å–∏–±–æ. –°–ª–µ–¥ –ø–æ–ª—É—á–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ üåø", reply_markup=reply_kb)

    try:
        if message.text:
            content = message.text.strip()
            lower = content.lower()

            if any(junk in lower for junk in JUNK_WORDS) or len(content) <= 2:
                print("‚ö†Ô∏è –ú—É—Å–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è")
                return

            if any(word in lower for word in BAD_WORDS):
                print("‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –∂—ë—Å—Ç–∫–∏—Ö —Å–ª–æ–≤")
                return

            if len(content.split()) <= 3 and any(word in lower for word in LITE_SWEAR):
                print("‚ö†Ô∏è –ö–æ—Ä–æ—Ç–∫–∏–π –º–∞—Ç ‚Äî –Ω–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è")
                return

            await bot.send_message(CHANNEL_ID, f"üìù –°–ª–µ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:

{content}")

        elif message.photo:
            await bot.send_photo(CHANNEL_ID, message.photo[-1].file_id, caption="üì∏ –°–ª–µ–¥ (—Ñ–æ—Ç–æ)")
        elif message.voice:
            await bot.send_voice(CHANNEL_ID, message.voice.file_id, caption="üé§ –°–ª–µ–¥ (–≥–æ–ª–æ—Å)")
        elif message.audio:
            await bot.send_audio(CHANNEL_ID, message.audio.file_id, caption="üéµ –°–ª–µ–¥ (–∞—É–¥–∏–æ)")
        elif message.document:
            await bot.send_document(CHANNEL_ID, message.document.file_id, caption="üìé –°–ª–µ–¥ (—Ñ–∞–π–ª)")
        else:
            await bot.send_message(CHANNEL_ID, "üì¶ –°–ª–µ–¥ –ø–æ–ª—É—á–µ–Ω (–Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–∏–ø)")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª:", e)

async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
