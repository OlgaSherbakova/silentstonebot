import random
import asyncio
import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import os

# –ë–æ—Ç –∏ –∫–∞–Ω–∞–ª
TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = "@mysilentchannel"
CHANNEL_LINK = "https://t.me/mysilentchannel"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
expanded_tasks = [
    {
        "title": "üåÄ –°—Ç–∞–Ω—å –ø–∞–∫–µ—Ç–æ–º.",
        "description": "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã ‚Äî –æ–±—ã—á–Ω—ã–π –ø–ª–∞—Å—Ç–∏–∫–æ–≤—ã–π –ø–∞–∫–µ—Ç.\n\n–ì–¥–µ —Ç—ã —Å–µ–π—á–∞—Å? –ù–∞ –≤–µ—Ç—Ä—É? –í —à–∫–∞—Ñ—É? –í —á—å–µ–π —Ä—É–∫–µ?\n\n–ß—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å? –û–±–∏–¥—É, —Å–≤–æ–±–æ–¥—É, —Ç–æ—Å–∫—É, –≥–æ—Ä–¥–æ—Å—Ç—å, –ø—É—Å—Ç–æ—Ç—É?\n\n–í—ã—Ä–∞–∑–∏ —ç—Ç–æ –∫–∞–∫ —Ö–æ—á–µ—à—å: üì∑ —Ñ–æ—Ç–æ, üìù —Ç–µ–∫—Å—Ç, üé• –≤–∏–¥–µ–æ, üé® —Ä–∏—Å—É–Ω–æ–∫ ‚Äî –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—É–º–∞–π –æ–± —ç—Ç–æ–º –ø–∞—Ä—É –º–∏–Ω—É—Ç."
    },
    {
        "title": "üé® –û–¥–∏–Ω —Ü–≤–µ—Ç.",
        "description": "–í—ã–±–µ—Ä–∏ –ª—é–±–æ–π —Ü–≤–µ—Ç. –ù–∞–π–¥–∏ 3‚Äì5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —ç—Ç–æ–≥–æ —Ü–≤–µ—Ç–∞ –≤–æ–∫—Ä—É–≥ —Å–µ–±—è.\n\n–†–∞–∑–ª–æ–∂–∏ –∏—Ö. –ü—Ä–∏—Å–º–æ—Ç—Ä–∏—Å—å. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—Å–∫–∞–∑? –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ? –ö–∞—Ä—Ç–∏–Ω–∞?\n\n–ú–æ–∂–µ—à—å —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å, –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å, –æ–ø–∏—Å–∞—Ç—å ‚Äî –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å."
    },
    {
        "title": "üïØÔ∏è –°–º–æ—Ç—Ä–∏ –Ω–∞ —Å–≤–µ—á—É.",
        "description": "–ó–∞–∂–≥–∏ —Å–≤–µ—á—É (–∏–ª–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤—å –µ—ë). –°–º–æ—Ç—Ä–∏ 5 –º–∏–Ω—É—Ç. –ù–µ –æ—Ç–≤–ª–µ–∫–∞–π—Å—è.\n\n–ü—É—Å—Ç—å –º—ã—Å–ª–∏ —Ç–µ–∫—É—Ç. –ü–æ—Ç–æ–º ‚Äî –∑–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞—Ä–∏—Å—É–π –≤—Å—ë, —á—Ç–æ –ø—Ä–∏—à–ª–æ –≤ –≥–æ–ª–æ–≤—É."
    },
    {
        "title": "üì¶ –ù–∞—Ç—é—Ä–º–æ—Ä—Ç —Å —É–ª–∏—Ü—ã.",
        "description": "–ù–∞–π–¥–∏ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ —É–ª–∏—Ü–µ. –õ—é–±—ã—Ö. –£–ø–∞–≤—à–∏–π –ª–∏—Å—Ç, –∫–∞–º–µ–Ω—å, –∫—Ä—ã—à–∫–∞, –ø–∞–ª–∫–∞‚Ä¶\n\n–°–æ–±–µ—Ä–∏ –∏–∑ –Ω–∏—Ö –Ω–∞—Ç—é—Ä–º–æ—Ä—Ç. –ö–∞–∫ –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç? –ß—Ç–æ –≤ –Ω—ë–º —Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ –∏–ª–∏ –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ–≥–æ?\n\n–°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –≤—ã–ª–æ–∂–∏ –Ω–∞ –º–∏–Ω—É—Ç—É –∏ —Ä–∞–∑–≥–ª—è–¥–∏."
    },
    {
        "title": "üí¨ –†–∞–∑–≥–æ–≤–æ—Ä –º–µ–∂–¥—É –≤–∏–ª–∫–∞–º–∏.",
        "description": "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ –¥–≤–µ –≤–∏–ª–∫–∏ –æ–±—Å—É–∂–¥–∞—é—Ç —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ. –ß—Ç–æ –º–µ–∂–¥—É –Ω–∏–º–∏? –õ—é–±–æ–≤—å? –°–ø–æ—Ä? –ó–∞–≤–∏—Å—Ç—å?\n\n–ù–∞–ø–∏—à–∏ –∏—Ö –¥–∏–∞–ª–æ–≥. –ò–ª–∏ —Ä–∞–∑—ã–≥—Ä–∞–π —Å—Ü–µ–Ω–∫—É. –ò–ª–∏ –≤—ã–ª–æ–∂–∏ –∏—Ö –≤ –ø–æ–∑–∞—Ö. –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ —É—Å–ª—ã—à—å —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ –≥–æ–ª–æ–≤–µ."
    }
]

# –ü–∞–º—è—Ç—å: –∫—Ç–æ —É–∂–µ –ø–æ–ª—É—á–∏–ª –∑–∞–¥–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è
user_last_task_date = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
reply_kb = ReplyKeyboardMarkup(resize_keyboard=True)
reply_kb.add(
    KeyboardButton("üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥"),
    KeyboardButton("üîÅ –î–∞–π –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
)

# –§–∏–ª—å—Ç—Ä—ã
BAD_WORDS = ["—Ö—É–π", "—á–ª–µ–Ω", "–ø–µ–Ω–∏—Å", "–µ–±", "–ø–∏–∑–¥", "fuck", "shit", "dick", "–ø–æ—Ä–Ω–æ", "—Ç—Ä–∞—Ö", "–¥—Ä–æ—á", "anal", "cum", "–ø–µ–¥–æ—Ñ–∏–ª"]
LITE_SWEAR = ["–±–ª—è", "—Å—É–∫–∞", "–Ω–∞—Ö—É–π", "–µ–±–∞—Ç—å", "–ø–∏–∑–¥–µ—Ü"]
JUNK_WORDS = ["—Å—Ç–∞—Ä—Ç", "start", "–∞–≥–∞", "–Ω—É", "–¥–∞", "–Ω–µ—Ç", "–æ–∫", "hello", "–ø—Ä–∏–≤–µ—Ç"]

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    today = datetime.date.today()
    last_date = user_last_task_date.get(user_id)

    greeting = (
        "–ü—Ä–∏–≤–µ—Ç. –Ø —Ä–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å.\n\n"
        "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, –∫–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ ‚Äî —ç—Ç–æ —É–∂–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ.\n\n"
        "–ù–µ –∑–Ω–∞—é, —Å—á–∏—Ç–∞–µ—à—å –ª–∏ —Ç—ã —Å–µ–±—è –∏—Å–∫—É—Å—Å—Ç–≤–æ–º, \n"
        "–Ω–æ –µ—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –Ω–∏–∂–µ –±—É–¥–µ—Ç –∑–∞–¥–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–∞–ª–æ —Å–ª—É—á–∞–π–Ω–æ.\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –≤—ã–ø–æ–ª–Ω–∏.\n"
        "–ï—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å ‚Äî –º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π —Å–ª–µ–¥: —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –∑–≤—É–∫, –Ω–∏—á–µ–≥–æ.\n\n"
        "–í—Å—ë –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –∞–Ω–æ–Ω–∏–º–Ω—ã–º."
    )
    await message.answer(greeting, reply_markup=reply_kb)

    if last_date == today:
        await message.answer("üïí –°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –∑–∞–¥–∞–Ω–∏–µ. –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞.")
    else:
        await send_task(message)
        user_last_task_date[user_id] = today
        await message.answer(f"üì° –°–ª–µ–¥—ã –ø–æ—è–≤–ª—è—é—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ:\n{CHANNEL_LINK}")

@dp.message_handler(lambda m: m.text == "üîÅ –î–∞–π –¥—Ä—É–≥–æ–µ –∑–∞–¥–∞–Ω–∏–µ")
async def another_task(message: types.Message):
    user_id = message.from_user.id
    today = datetime.date.today()
    if user_last_task_date.get(user_id) == today:
        await message.answer("üïí –°–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –∑–∞–¥–∞–Ω–∏–µ. –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞.")
    else:
        await send_task(message)
        user_last_task_date[user_id] = today

async def send_task(message):
    task = random.choice(expanded_tasks)
    await message.answer(f"*{task['title']}*\n\n{task['description']}", parse_mode="Markdown")

@dp.message_handler(lambda m: m.text == "üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥")
async def wait_for_response(message: types.Message):
    await message.answer("–ñ–¥—É —Ç–≤–æ–π —Å–ª–µ–¥. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–≤—É–∫.")

@dp.message_handler(content_types=types.ContentType.ANY)
async def receive_trace(message: types.Message):
    await message.answer("–°–ø–∞—Å–∏–±–æ. –°–ª–µ–¥ –ø–æ–ª—É—á–µ–Ω. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ üåø")

    try:
        if message.text:
            content = message.text.strip()
            lower = content.lower()

            if lower in JUNK_WORDS or len(content) <= 2:
                print("‚ö†Ô∏è –ú—É—Å–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è")
                return

            if any(word in lower for word in BAD_WORDS):
                print("‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ –∂—ë—Å—Ç–∫–∏—Ö —Å–ª–æ–≤")
                return

            if len(content.split()) <= 3 and any(word in lower for word in LITE_SWEAR):
                print("‚ö†Ô∏è –ö–æ—Ä–æ—Ç–∫–∏–π –º–∞—Ç ‚Äî –Ω–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è")
                return

            await bot.send_message(CHANNEL_ID, f"üìù –°–ª–µ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n{content}")

        elif message.photo:
            await bot.send_photo(CHANNEL_ID, message.photo[-1].file_id, caption="üì∏ –°–ª–µ–¥ (—Ñ–æ—Ç–æ)")
        elif message.voice:
            await bot.send_voice(CHANNEL_ID, message.voice.file_id, caption="üé§ –°–ª–µ–¥ (–≥–æ–ª–æ—Å)")
        elif message.audio:
            await bot.send_audio(CHANNEL_ID, message.audio.file_id, caption="üéµ –°–ª–µ–¥ (–∞—É–¥–∏–æ)")
        elif message.document:
            await bot.send_document(CHANNEL_ID, message.document.file_id, caption="üìé –°–ª–µ–¥ (—Ñ–∞–π–ª)")
        else:
            await bot.send_message(CHANNEL_ID, "üì¶ –°–ª–µ–¥ –ø–æ–ª—É—á–µ–Ω (–Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–∏–ø)")
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∫–∞–Ω–∞–ª:", e)

async def main():
    await dp.start_polling()

if __name__ == "__main__":
    asyncio.run(main())
